{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/LEARN-Projects/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        compBoardHide,\n        compShips,\n        userArray,\n        gameStart\n      } = this.state;\n\n      if (!userArray.includes(index) && gameStart === 1) {\n        compBoard[index] = compBoardHide[index];\n        userArray.push(index);\n\n        if (compBoard[index] === \"üõ•üí•\") {\n          this.setState({\n            compShips: --compShips,\n            hitMessage: \"You got him!\"\n          });\n        } else {\n          this.setState({\n            hitMessage: \"You missed!\"\n          });\n        }\n\n        this.setState({\n          compBoard: compBoard,\n          compBoardHide: compBoardHide,\n          userTurn: \"computer\",\n          userArray: userArray\n        });\n\n        if (compShips < 1) {\n          this.setState({\n            userStatus: \"You sunk the enemies bootay! You win!\"\n          });\n        }\n      } else if (userArray.includes(index)) {\n        alert(\"You already took your shot there, try a different spot!\");\n      } else if (gameStart === 0) {\n        alert(\"Start the game!\");\n      }\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus,\n        gameStart\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"ü§™\");\n      userBoardHide = userBoardHide.map(value => value = \"ü§™\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus,\n        gameStart: 0,\n        hitMessage: \"\",\n        userShips: 2,\n        compShips: 2,\n        userTurn: \"user\",\n        userArray: [],\n        shipArray: []\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        gameStart\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      if (!gameStart) {\n        let randomCompBH1 = Math.floor(Math.random() * compBoardHide.length);\n        let randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n\n        while (randomCompBH1 === randomCompBH2) {\n          randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n        } // finds random index that will assign battleships to userBoardHide\n\n\n        let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length);\n        let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n\n        while (randomUserBH1 === randomUserBH2) {\n          randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        userBoard[randomUserBH1] = \"‚õµÔ∏è\";\n        userBoard[randomUserBH2] = \"‚õµÔ∏è\";\n        userBoardHide[randomUserBH1] = \"‚õµÔ∏è\";\n        userBoardHide[randomUserBH2] = \"‚õµÔ∏è\";\n        compBoardHide[randomCompBH1] = \"üõ•üí•\";\n        compBoardHide[randomCompBH2] = \"üõ•üí•\";\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide: compBoardHide,\n          userBoardHide: userBoardHide,\n          gameStart: 1\n        });\n      }\n    };\n\n    this.compChoose = () => {\n      let {\n        userBoard,\n        userBoardHide,\n        userShips,\n        shipArray,\n        gameStart,\n        userStatus,\n        userTurn\n      } = this.state;\n\n      if (!gameStart) {\n        alert(\"Start the game!\");\n      } else if (gameStart && userStatus === \"\" && userTurn === \"computer\") {\n        let compChoice = Math.floor(Math.random() * userBoardHide.length); // while(userBoard[compChoice] = \"ü§™\"){\n        //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // }\n\n        while (shipArray.includes(compChoice)) {\n          compChoice = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        shipArray.push(compChoice);\n        userBoard[compChoice] = userBoardHide[compChoice];\n\n        if (userBoard[compChoice] === \"‚õµÔ∏è\") {\n          userBoard[compChoice] = \"‚õµÔ∏èüí•\";\n          this.setState({\n            userShips: --userShips,\n            hitMessage: \"You got hit!\"\n          });\n        } else {\n          this.setState({\n            hitMessage: \"The computer missed!\"\n          });\n        }\n\n        this.setState({\n          userBoard: userBoard,\n          userBoardHide: userBoardHide,\n          userTurn: \"user\",\n          shipArray: shipArray\n        });\n\n        if (userShips < 1) {\n          this.setState({\n            userStatus: \"Enemy sunk your bootay!\"\n          });\n        } // console.log(compChoice)\n        // console.log(shipArray)\n\n      }\n    };\n\n    this.state = {\n      array: [\"rom\", \"asd\", 4, true, 9],\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      userBoardHide: [\"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      gameStart: 0,\n      userShips: 2,\n      compShips: 2,\n      shipArray: [],\n      userArray: [],\n      userTurn: \"user\",\n      userStatus: \"\",\n      hitMessage: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      userStatus,\n      userTurn,\n      userArray\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      index: index,\n      value: value,\n      userStatus: userStatus,\n      userTurn: userTurn,\n      userArray: userArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }));\n    let userB = userBoard.map(value => React.createElement(Square, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"BATTLESHIP\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"full\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"compbutt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Enemy water \"), React.createElement(\"button\", {\n      onClick: this.compChoose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Computers Turn\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Enemy Ships: \", this.state.compShips)), React.createElement(\"div\", {\n      className: \"middlemessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.userStatus), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.hitMessage)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"fullone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"notsure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Your Water\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, userB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Your ships:  \", this.state.userShips)), React.createElement(\"div\", {\n      className: \"normbutt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Reset Game\")));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/LEARN-Projects/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","compBoardHide","compShips","userArray","gameStart","state","includes","push","setState","hitMessage","userTurn","userStatus","alert","resetGame","userBoard","userBoardHide","map","value","userShips","shipArray","randomize","randomCompBH1","Math","floor","random","length","randomCompBH2","randomUserBH1","randomUserBH2","compChoose","compChoice","array","render","compB","userB"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      array: [\"rom\",\"asd\",4,true,9],\n      compBoard: [\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      userBoardHide: [\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n        \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      gameStart: 0,\n      userShips: 2,\n      compShips: 2,\n      shipArray: [],\n      userArray: [],\n      userTurn: \"user\",\n      userStatus: \"\",\n      hitMessage: \"\"\n    }\n  }\n  handleBoard = (index) => {\n    let { compBoard, compBoardHide, compShips, userArray, gameStart } = this.state\n    if (!(userArray.includes(index)) && gameStart === 1) {\n      compBoard[index] = compBoardHide[index]\n      userArray.push(index)\n      if (compBoard[index] === \"üõ•üí•\") {\n        this.setState({\n          compShips: --compShips,\n          hitMessage: \"You got him!\"\n        })\n      } else {\n        this.setState({ hitMessage: \"You missed!\" })\n      }\n      this.setState({\n        compBoard: compBoard,\n        compBoardHide: compBoardHide,\n        userTurn: \"computer\",\n        userArray: userArray\n      })\n      if (compShips < 1) {\n        this.setState({\n          userStatus: \"You sunk the enemies bootay! You win!\"\n        })\n      }\n    } else if (userArray.includes(index)) {\n      alert(\"You already took your shot there, try a different spot!\")\n    } else if (gameStart === 0) {\n      alert(\"Start the game!\")\n    }\n  }\n\n  resetGame = () => {\n    let { compBoard, userBoard, compBoardHide, userBoardHide, userStatus, gameStart } = this.state\n    compBoard = compBoard.map(value => value = \"\")\n    userBoard = userBoard.map(value => value = \"\")\n    compBoardHide = compBoardHide.map(value => value = \"ü§™\")\n    userBoardHide = userBoardHide.map(value => value = \"ü§™\")\n    userStatus = \"\"\n    this.setState({\n      compBoard: compBoard,\n      userBoard: userBoard,\n      compBoardHide: compBoardHide,\n      userBoardHide: userBoardHide,\n      userStatus: userStatus,\n      gameStart: 0,\n      hitMessage: \"\",\n      userShips: 2,\n      compShips: 2,\n      userTurn: \"user\",\n      userArray: [],\n      shipArray: []\n    })\n\n  }\n  //\n\n  randomize = () => {\n    // comp = computer , user = you\n    let { userBoard, compBoardHide, userBoardHide, gameStart} = this.state\n    // finds random index that will assign battleships to compBoardHide\n    if (!gameStart) {\n      let randomCompBH1 = Math.floor(Math.random() * compBoardHide.length)\n      let randomCompBH2 = Math.floor(Math.random() * compBoardHide.length)\n      while (randomCompBH1 === randomCompBH2) {\n        randomCompBH2 = Math.floor(Math.random() * compBoardHide.length)\n      }\n      // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length)\n      while (randomUserBH1 === randomUserBH2) {\n        randomUserBH2 = Math.floor(Math.random() * userBoardHide.length)\n      }\n      userBoard[randomUserBH1] = \"‚õµÔ∏è\"\n      userBoard[randomUserBH2] = \"‚õµÔ∏è\"\n      userBoardHide[randomUserBH1] = \"‚õµÔ∏è\"\n      userBoardHide[randomUserBH2] = \"‚õµÔ∏è\"\n      compBoardHide[randomCompBH1] = \"üõ•üí•\"\n      compBoardHide[randomCompBH2] = \"üõ•üí•\"\n      this.setState({\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        gameStart: 1\n      })\n    }\n  }\n  compChoose = () => {\n    let { userBoard, userBoardHide, userShips, shipArray, gameStart, userStatus, userTurn } = this.state\n    if (!gameStart) {\n      alert(\"Start the game!\")\n    } else if (gameStart && userStatus === \"\" && userTurn === \"computer\") {\n      let compChoice = Math.floor(Math.random() * userBoardHide.length)\n      // while(userBoard[compChoice] = \"ü§™\"){\n      //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n      // }\n      while (shipArray.includes(compChoice)) {\n        compChoice = Math.floor(Math.random() * userBoardHide.length)\n      }\n      shipArray.push(compChoice)\n      userBoard[compChoice] = userBoardHide[compChoice]\n      if (userBoard[compChoice] === \"‚õµÔ∏è\") {\n        userBoard[compChoice] = \"‚õµÔ∏èüí•\"\n        this.setState({\n          userShips: --userShips,\n          hitMessage: \"You got hit!\"\n        })\n      } else {\n        this.setState({\n          hitMessage: \"The computer missed!\"\n        })\n      }\n      this.setState({\n        userBoard: userBoard,\n        userBoardHide: userBoardHide,\n        userTurn: \"user\",\n        shipArray: shipArray\n      })\n      if (userShips < 1) {\n        this.setState({\n          userStatus: \"Enemy sunk your bootay!\"\n        })\n      }\n      // console.log(compChoice)\n      // console.log(shipArray)\n    }\n  }\n\n  render() {\n    let { compBoard, userBoard, userStatus, userTurn, userArray } = this.state\n    let compB = compBoard.map((value, index) =>\n      <Square\n        handleBoard={this.handleBoard}\n        index={index}\n        value={value}\n        userStatus={userStatus}\n        userTurn={userTurn}\n        userArray={userArray}\n      />)\n    let userB = userBoard.map((value) =>\n      <Square\n        value={value}\n      />\n    )\n\n    return (\n      <div className=\"all\">\n        <h1>BATTLESHIP</h1>\n        <br />\n        <div className=\"full\">\n          <div className=\"compbutt\">\n            <p>Enemy water </p>\n            <button onClick={this.compChoose}>Computers Turn</button>\n          </div>\n          <br />\n          <div className=\"board\">\n            {compB}\n          </div>\n          <p>Enemy Ships: {this.state.compShips}</p>\n        </div>\n        <div className=\"middlemessage\">\n          <h1>{this.state.userStatus}</h1>\n          <br />\n          <p>{this.state.hitMessage}</p>\n        </div>\n        <br />\n        <div className=\"fullone\">\n          <div className=\"notsure\">\n            <p>Your Water</p>\n          </div>\n          <br />\n          <div className=\"board\">\n            {userB}\n          </div>\n          <p>Your ships:  {this.state.userShips}</p>\n        </div>\n        <div className=\"normbutt\">\n          <button onClick={this.randomize} >Start Game</button>\n          <button onClick={this.resetGame}>Reset Game</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}