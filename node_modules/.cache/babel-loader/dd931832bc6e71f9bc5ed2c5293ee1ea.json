{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLocation = index => {\n      let {\n        display,\n        spaces,\n        counter,\n        userStatus\n      } = this.state;\n      spaces[index] = display[index];\n      this.setState({\n        spaces: spaces,\n        display: display,\n        counter: ++counter\n      });\n\n      if (spaces[index] === \"💰\") {\n        this.setState({\n          userStatus: \"You win!\"\n        });\n      } else if (spaces[index] === \"💣\" || counter > 3) {\n        this.setState({\n          userStatus: \"You lose!\"\n        });\n      }\n    };\n\n    this.resetGame = () => {\n      let {\n        spaces,\n        display,\n        counter,\n        userStatus\n      } = this.state;\n      spaces = spaces.map(value => value = \"❓\");\n      display = display.map(value => value = \"🌴\");\n      this.setState({\n        display: display,\n        spaces: spaces,\n        counter: 0,\n        userStatus: \"\"\n      });\n    };\n\n    this.randomizer = () => {\n      let {\n        spaces,\n        display\n      } = this.state;\n      let randomTreasure = Math.floor(Math.random() * display.length);\n      let randomBomb = Math.floor(Math.random() * display.length);\n\n      while (randomTreasure === randomBomb) {\n        randomTreasure = Math.floor(Math.random() * display.length);\n      }\n\n      display[randomBomb] = \"💣\";\n      display[randomTreasure] = \"💰\";\n      this.setState({\n        display: display\n      });\n    };\n\n    this.state = {\n      spaces: [\"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\"],\n      display: [\"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\"],\n      counter: 0,\n      userStatus: \"\"\n    };\n  }\n\n  render() {\n    let {\n      spaces,\n      display,\n      counter,\n      userStatus\n    } = this.state;\n    let square = spaces.map((value, index) => React.createElement(Square, {\n      handleLocation: this.handleLocation,\n      randomize: this.randomize,\n      index: index,\n      value: value,\n      counter: counter,\n      userStatus: userStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"You have: \", 4 - this.state.counter, \" tries\"), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, square, React.createElement(\"button\", {\n      onClick: this.randomizer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" Start Game\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \" Reset Game\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.userStatus));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleLocation","index","display","spaces","counter","userStatus","state","setState","resetGame","map","value","randomizer","randomTreasure","Math","floor","random","length","randomBomb","render","square","randomize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          spaces: [\"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\", \"❓\"],\n          display:[\"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\", \"🌴\"],\n          counter: 0,\n          userStatus: \"\"\n        }\n    }\n    handleLocation = (index) => {\n        let {display,spaces,counter,userStatus} = this.state\n        spaces[index] = display[index]\n        this.setState({\n          spaces:spaces,\n          display:display,\n          counter:++counter\n        })\n        if(spaces[index]===\"💰\"){\n          this.setState({userStatus:\"You win!\"})\n        } else if(spaces[index] ===\"💣\" || counter >3){\n          this.setState({userStatus:\"You lose!\"})\n        }\n\n    }\n\n    resetGame = () =>{\n        let {spaces,display,counter,userStatus} = this.state;\n        spaces = spaces.map(value => value = \"❓\")\n        display = display.map(value => value = \"🌴\")\n        this.setState({\n          display:display,\n          spaces:spaces,\n          counter:0,\n          userStatus:\"\"\n        })\n    }\n//creating method to get our random treasure and bomb locations\n\n    randomizer = () => {\n      let { spaces,display } = this.state\n      let randomTreasure = Math.floor(Math.random() * display.length)\n      let randomBomb = Math.floor(Math.random() * display.length)\n      while(randomTreasure === randomBomb){\n              randomTreasure = Math.floor(Math.random() * display.length)\n          }\n      display[randomBomb] = \"💣\"\n      display[randomTreasure] = \"💰\"\n      this.setState({display: display})\n    }\n\n\n  render() {\n    let {spaces,display,counter,userStatus} = this.state\n    let square = spaces.map((value, index) => \n        <Square\n        handleLocation = {this.handleLocation}\n        randomize = {this.randomize}\n        index = { index } \n        value = { value }\n        counter = {counter}\n        userStatus = {userStatus}\n        /> )\n  \n\n    return (\n     <div>\n        <p>You have: {4-this.state.counter} tries</p>\n        <div className = \"board\">\n        {square}\n        <button onClick = {this.randomizer}> Start Game</button>\n        <button onClick = {this.resetGame}> Reset Game</button>\n        </div>\n        <p>{this.state.userStatus}</p>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}