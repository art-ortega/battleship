{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userTurn,\n        compShips\n      } = this.state;\n      compBoard[index] = compBoardHide[index];\n\n      if (compBoard[index] === \"🛥💥\") {\n        this.setState({\n          compShips: --compShips,\n          hitMessage: \"You got him!\"\n        });\n      } else {\n        this.setState({\n          hitMessage: \"You missed!\"\n        });\n      }\n\n      this.setState({\n        compBoard: compBoard,\n        compBoardHide: compBoardHide,\n        userTurn: \"computer\"\n      });\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus,\n        gameStart\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"🤪\");\n      userBoardHide = userBoardHide.map(value => value = \"🤪\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus,\n        gameStart: 0,\n        hitMessage: \"\"\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        gameStart,\n        shipArray\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      if (!gameStart) {\n        let randomCompBH1 = Math.floor(Math.random() * compBoardHide.length);\n        let randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n\n        while (randomCompBH1 === randomCompBH2) {\n          randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n        } // finds random index that will assign battleships to userBoardHide\n\n\n        let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length);\n        let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n\n        while (randomUserBH1 === randomUserBH2) {\n          randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        userBoard[randomUserBH1] = \"⛵️\";\n        userBoard[randomUserBH2] = \"⛵️\";\n        userBoardHide[randomUserBH1] = \"⛵️\";\n        userBoardHide[randomUserBH2] = \"⛵️\";\n        compBoardHide[randomCompBH1] = \"🛥💥\";\n        compBoardHide[randomCompBH2] = \"🛥💥\";\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide: compBoardHide,\n          userBoardHide: userBoardHide,\n          gameStart: 1\n        });\n      }\n\n      console.log(userBoard);\n      console.log(userBoard.length);\n    };\n\n    this.compChoose = () => {\n      let {\n        userBoard,\n        userBoardHide,\n        userShips,\n        shipArray,\n        gameStart\n      } = this.state;\n\n      if (gameStart) {\n        alert(\"Start the game!\");\n      } else {\n        let compChoice = Math.floor(Math.random() * userBoardHide.length); // while(userBoard[compChoice] = \"🤪\"){\n        //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // }\n\n        while (shipArray.includes(compChoice)) {\n          compChoice = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        shipArray.push(compChoice);\n        userBoard[compChoice] = userBoardHide[compChoice];\n\n        if (userBoard[compChoice] === \"⛵️\") {\n          userBoard[compChoice] = \"⛵️💥\";\n          this.setState({\n            userShips: --userShips,\n            hitMessage: \"You got hit!\"\n          });\n        } else {\n          this.setState({\n            hitMessage: \"The computer missed!\"\n          });\n        }\n\n        this.setState({\n          userBoard: userBoard,\n          userBoardHide: userBoardHide,\n          userTurn: \"user\",\n          shipArray: shipArray\n        });\n        console.log(compChoice);\n        console.log(shipArray);\n      }\n    };\n\n    this.state = {\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      gameStart: 0,\n      userShips: 2,\n      compShips: 2,\n      shipArray: [],\n      userTurn: \"user\",\n      userStatus: \"\",\n      hitMessage: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      counter,\n      userStatus,\n      userTurn\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      randomize: this.randomize,\n      index: index,\n      value: value,\n      counter: counter,\n      userStatus: userStatus,\n      userTurn: userTurn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n    let userB = userBoard.map((value, index) => React.createElement(Square, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"BATTLESHIP\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Computer Board | Comp Ships: \", this.state.compShips), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"User Board | Your ships: \", this.state.userShips), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, userB), React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.compChoose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Computers Turn\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Reset Game\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.state.hitMessage)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","userBoard","compBoardHide","userBoardHide","userTurn","compShips","state","setState","hitMessage","resetGame","userStatus","gameStart","map","value","randomize","shipArray","randomCompBH1","Math","floor","random","length","randomCompBH2","randomUserBH1","randomUserBH2","console","log","compChoose","userShips","alert","compChoice","includes","push","render","counter","compB","userB"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          compBoard: [\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          userBoard:[\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          compBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          gameStart: 0,\n          userShips: 2,\n          compShips: 2,\n          shipArray:[],\n          userTurn: \"user\",\n          userStatus:\"\",\n          hitMessage:\"\"\n        }\n    }\n    handleBoard = (index) => {\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userTurn,compShips} = this.state\n          compBoard[index] = compBoardHide[index]\n          if(compBoard[index] === \"🛥💥\"){\n            this.setState({compShips:--compShips,\n            hitMessage: \"You got him!\"})\n          } else {\n            this.setState({hitMessage:\"You missed!\"})\n          }\n            this.setState({\n                compBoard:compBoard,\n                compBoardHide: compBoardHide,\n                userTurn:\"computer\"\n        })\n    }\n\n    resetGame = () =>{\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userStatus,gameStart} = this.state\n      compBoard = compBoard.map(value=> value =\"\")\n      userBoard = userBoard.map(value=> value=\"\")\n      compBoardHide = compBoardHide.map(value=> value=\"🤪\")\n      userBoardHide = userBoardHide.map(value=> value=\"🤪\")\n      userStatus = \"\"\n      this.setState({\n        compBoard:compBoard,\n        userBoard:userBoard,\n        compBoardHide:compBoardHide,\n        userBoardHide:userBoardHide,\n        userStatus:userStatus,\n        gameStart:0,\n        hitMessage:\"\"\n      })\n\n    }\n//\n\n    randomize = () => {\n      // comp = computer , user = you\n      let {userBoard,compBoardHide,userBoardHide,gameStart,shipArray} = this.state\n      // finds random index that will assign battleships to compBoardHide\n      if(!gameStart) {\n      let randomCompBH1 = Math.floor(Math.random()* compBoardHide.length)\n      let randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        while(randomCompBH1 === randomCompBH2){\n          randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        }\n        // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length)\n        while(randomUserBH1 === randomUserBH2){\n          randomUserBH2 = Math.floor(Math.random()* userBoardHide.length)\n        }\n        userBoard[randomUserBH1] = \"⛵️\"\n        userBoard[randomUserBH2] = \"⛵️\"\n        userBoardHide[randomUserBH1] = \"⛵️\"\n        userBoardHide[randomUserBH2] = \"⛵️\"\n        compBoardHide[randomCompBH1] = \"🛥💥\"\n        compBoardHide[randomCompBH2] = \"🛥💥\"\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide:compBoardHide,\n          userBoardHide:userBoardHide,\n          gameStart:1\n        })\n      }\n        console.log(userBoard)\n        console.log(userBoard.length)\n      \n    }\n    compChoose = () =>{\n      let {userBoard,userBoardHide,userShips,shipArray,gameStart} = this.state\n      if(gameStart){\n        alert(\"Start the game!\")\n      } else {\n        let compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // while(userBoard[compChoice] = \"🤪\"){\n        //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // }\n        while(shipArray.includes(compChoice)){\n            compChoice = Math.floor(Math.random() * userBoardHide.length)\n        }\n        shipArray.push(compChoice)\n        userBoard[compChoice] = userBoardHide[compChoice]\n        if(userBoard[compChoice] === \"⛵️\"){\n            userBoard[compChoice] = \"⛵️💥\"\n            this.setState({\n            userShips:--userShips,\n            hitMessage:\"You got hit!\"\n            })\n        } else {\n            this.setState({\n            hitMessage:\"The computer missed!\"\n            })\n        }\n        this.setState({\n            userBoard:userBoard,\n            userBoardHide:userBoardHide,\n            userTurn:\"user\",\n            shipArray:shipArray})\n        console.log(compChoice)\n        console.log(shipArray)\n      }\n    }\n\n  render() {\n    let {compBoard,userBoard,counter,userStatus,userTurn} = this.state\n    let compB = compBoard.map((value, index) => \n        <Square\n          handleBoard = {this.handleBoard}\n          randomize = {this.randomize}\n          index = { index } \n          value = { value }\n          counter = {counter}\n          userStatus = {userStatus}\n          userTurn = {userTurn}\n        /> )\n    let userB = userBoard.map((value, index)=> \n        <Square \n        value={value}\n        />\n        )\n\n    return (\n     <div>\n       <h1>BATTLESHIP</h1>\n       <p>Computer Board | Comp Ships: {this.state.compShips}</p>\n       <br/>\n        <div className = \"board\">\n          {compB}\n        </div>\n        <p>User Board | Your ships: {this.state.userShips}</p>\n        <br/>\n        <div className = \"board\">\n          {userB}\n        </div>\n        <button onClick={this.randomize}>Start Game</button>\n        <button onClick={this.compChoose}>Computers Turn</button>\n        <button onClick={this.resetGame}>Reset Game</button>\n        <div>\n          <p>{this.state.hitMessage}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}