{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userTurn,\n        compShips\n      } = this.state;\n      compBoard[index] = compBoardHide[index];\n\n      if (compBoard[index] === \"🛥💥\") {\n        this.setState({\n          compShips: --compShips\n        });\n      }\n\n      this.setState({\n        compBoard: compBoard,\n        compBoardHide: compBoardHide,\n        userTurn: \"computer\"\n      });\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus,\n        gameStart\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"🤪\");\n      userBoardHide = userBoardHide.map(value => value = \"🤪\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus,\n        gameStart: 0\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        gameStart\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      if (!gameStart) {\n        let randomCompBH1 = Math.floor(Math.random() * compBoardHide.length);\n        let randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n\n        while (randomCompBH1 === randomCompBH2) {\n          randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n        } // finds random index that will assign battleships to userBoardHide\n\n\n        let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length);\n        let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n\n        while (randomUserBH1 === randomUserBH2) {\n          randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        userBoard[randomUserBH1] = \"⛵️\";\n        userBoard[randomUserBH2] = \"⛵️\";\n        userBoardHide[randomUserBH1] = \"⛵️\";\n        userBoardHide[randomUserBH2] = \"⛵️\";\n        compBoardHide[randomCompBH1] = \"🛥💥\";\n        compBoardHide[randomCompBH2] = \"🛥💥\";\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide: compBoardHide,\n          userBoardHide: userBoardHide,\n          gameStart: 1\n        });\n      }\n\n      console.log(userBoard);\n      console.log(userBoard.length);\n    };\n\n    this.compChoose = () => {\n      let {\n        userBoard,\n        userBoardHide,\n        userShips,\n        userStatus,\n        userTurn\n      } = this.state;\n      let compChoice = Math.floor(Math.random() * userBoardHide.length);\n\n      while (userBoard[compChoice].length > 0) {\n        compChoice = Math.floor(Math.random() * userBoardHide.length);\n      }\n\n      userBoard[compChoice] = userBoardHide[compChoice];\n\n      if (userBoard[compChoice] === \"⛵️\") {\n        this.setState({\n          userShips: --userShips,\n          hitMessage: \"You got hit!\"\n        });\n      } else {\n        this.setState({\n          hitMessage: \"You missed!\"\n        });\n      }\n\n      this.setState({\n        userBoard: userBoard,\n        userBoardHide: userBoardHide,\n        userTurn: \"user\"\n      });\n    };\n\n    this.state = {\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      gameStart: 0,\n      userShips: 2,\n      compShips: 2,\n      userTurn: \"user\",\n      userStatus: \"\",\n      hitMessage: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      counter,\n      userStatus,\n      userTurn\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      randomize: this.randomize,\n      index: index,\n      value: value,\n      counter: counter,\n      userStatus: userStatus,\n      userTurn: userTurn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n    let userB = userBoard.map((value, index) => React.createElement(Square, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Computer Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"User Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, userB), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Your ships: \", this.state.userShips), React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.compChoose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Computers Turn\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Reset Game\"));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","userBoard","compBoardHide","userBoardHide","userTurn","compShips","state","setState","resetGame","userStatus","gameStart","map","value","randomize","randomCompBH1","Math","floor","random","length","randomCompBH2","randomUserBH1","randomUserBH2","console","log","compChoose","userShips","compChoice","hitMessage","render","counter","compB","userB"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          compBoard: [\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          userBoard:[\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          compBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          gameStart: 0,\n          userShips: 2,\n          compShips: 2,\n          userTurn: \"user\",\n          userStatus:\"\",\n          hitMessage:\"\"\n        }\n    }\n    handleBoard = (index) => {\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userTurn,compShips} = this.state\n          compBoard[index] = compBoardHide[index]\n          if(compBoard[index] === \"🛥💥\"){\n            this.setState({compShips:--compShips})\n          }\n            this.setState({\n                compBoard:compBoard,\n                compBoardHide: compBoardHide,\n                userTurn:\"computer\"\n        })\n    }\n\n    resetGame = () =>{\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userStatus,gameStart} = this.state\n      compBoard = compBoard.map(value=> value =\"\")\n      userBoard = userBoard.map(value=> value=\"\")\n      compBoardHide = compBoardHide.map(value=> value=\"🤪\")\n      userBoardHide = userBoardHide.map(value=> value=\"🤪\")\n      userStatus = \"\"\n      this.setState({\n        compBoard:compBoard,\n        userBoard:userBoard,\n        compBoardHide:compBoardHide,\n        userBoardHide:userBoardHide,\n        userStatus:userStatus,\n        gameStart:0\n      })\n\n    }\n//\n\n    randomize = () => {\n      // comp = computer , user = you\n      let {userBoard,compBoardHide,userBoardHide,gameStart} = this.state\n      // finds random index that will assign battleships to compBoardHide\n      if(!gameStart) {\n      let randomCompBH1 = Math.floor(Math.random()* compBoardHide.length)\n      let randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        while(randomCompBH1 === randomCompBH2){\n          randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        }\n        // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length)\n        while(randomUserBH1 === randomUserBH2){\n          randomUserBH2 = Math.floor(Math.random()* userBoardHide.length)\n        }\n        userBoard[randomUserBH1] = \"⛵️\"\n        userBoard[randomUserBH2] = \"⛵️\"\n        userBoardHide[randomUserBH1] = \"⛵️\"\n        userBoardHide[randomUserBH2] = \"⛵️\"\n        compBoardHide[randomCompBH1] = \"🛥💥\"\n        compBoardHide[randomCompBH2] = \"🛥💥\"\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide:compBoardHide,\n          userBoardHide:userBoardHide,\n          gameStart:1\n        })\n      }\n        console.log(userBoard)\n        console.log(userBoard.length)\n      \n    }\n    compChoose = () =>{\n      let {userBoard,userBoardHide,userShips,userStatus,userTurn} = this.state\n      let compChoice = Math.floor(Math.random()* userBoardHide.length)\n      while(userBoard[compChoice].length > 0){\n          compChoice = Math.floor(Math.random()* userBoardHide.length)\n      }\n      userBoard[compChoice] = userBoardHide[compChoice]\n      if(userBoard[compChoice] === \"⛵️\"){\n        this.setState({\n          userShips:--userShips,\n          hitMessage:\"You got hit!\"\n        })\n      } else {\n        this.setState({\n          hitMessage:\"You missed!\"\n        })\n      }\n      this.setState({\n        userBoard:userBoard,\n        userBoardHide:userBoardHide,\n        userTurn:\"user\"})\n    }\n\n  render() {\n    let {compBoard,userBoard,counter,userStatus,userTurn} = this.state\n    let compB = compBoard.map((value, index) => \n        <Square\n          handleBoard = {this.handleBoard}\n          randomize = {this.randomize}\n          index = { index } \n          value = { value }\n          counter = {counter}\n          userStatus = {userStatus}\n          userTurn = {userTurn}\n        /> )\n    let userB = userBoard.map((value, index)=> \n        <Square \n        value={value}\n        />\n        )\n\n    return (\n     <div>\n       <p>Computer Board</p>\n       <br/>\n        <div className = \"board\">\n          {compB}\n        </div>\n        <p>User Board</p>\n        <br/>\n        <div className = \"board\">\n          {userB}\n        </div>\n        <div>\n          Your ships: {this.state.userShips}\n        </div>\n        <button onClick={this.randomize}>Start Game</button>\n        <button onClick={this.compChoose}>Computers Turn</button>\n        <button onClick={this.resetGame}>Reset Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}