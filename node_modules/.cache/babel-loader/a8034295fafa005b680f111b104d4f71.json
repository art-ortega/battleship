{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userTurn,\n        compShips\n      } = this.state;\n      compBoard[index] = compBoardHide[index];\n\n      if (compBoard[index] === \"🛥💥\") {\n        this.setState({\n          compShips: --compShips\n        });\n      }\n\n      this.setState({\n        compBoard: compBoard,\n        compBoardHide: compBoardHide,\n        userTurn: \"computer\"\n      });\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"🤪\");\n      userBoardHide = userBoardHide.map(value => value = \"🤪\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      let randomCompBH1 = Math.ceil(Math.random() * compBoardHide.length);\n      let randomCompBH2 = Math.ceil(Math.random() * compBoardHide.length);\n\n      while (randomCompBH1 === randomCompBH2) {\n        randomCompBH2 = Math.ceil(Math.random() * compBoardHide.length);\n      } // finds random index that will assign battleships to userBoardHide\n\n\n      let randomUserBH1 = Math.ceil(Math.random() * userBoardHide.length);\n      let randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length);\n\n      while (randomUserBH1 === randomUserBH2) {\n        randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length);\n      }\n\n      userBoard[randomUserBH1] = \"⛵️\";\n      userBoard[randomUserBH2] = \"⛵️\";\n      userBoardHide[randomUserBH1] = \"⛵️\";\n      userBoardHide[randomUserBH2] = \"⛵️\";\n      compBoardHide[randomCompBH1] = \"🛥💥\";\n      compBoardHide[randomCompBH2] = \"🛥💥\";\n      this.setState({\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide\n      });\n    };\n\n    this.compChoose = () => {\n      let {\n        userBoard,\n        userHiddenBoard,\n        userShips,\n        userStatus,\n        userTurn\n      } = this.state;\n      let compChoice = Math.ceil(Math.random() * userHiddenBoard.length);\n      userBoard[compChoice] = userHiddenBoard[compChoice];\n\n      if (userBoard[compChoice] === \"⛵️\") {\n        this.setState({\n          userShips: --userShips\n        });\n      }\n    };\n\n    this.state = {\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userShips: 2,\n      compShips: 2,\n      userTurn: \"user\",\n      userStatus: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      counter,\n      userStatus,\n      userTurn\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      randomize: this.randomize,\n      index: index,\n      value: value,\n      counter: counter,\n      userStatus: userStatus,\n      userTurn: userTurn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n    let userB = userBoard.map((value, index) => React.createElement(Square, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Computer Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"User Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, userB), React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.compChoose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Computers Turn\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Reset Game\"));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","userBoard","compBoardHide","userBoardHide","userTurn","compShips","state","setState","resetGame","userStatus","map","value","randomize","randomCompBH1","Math","ceil","random","length","randomCompBH2","randomUserBH1","randomUserBH2","compChoose","userHiddenBoard","userShips","compChoice","render","counter","compB","userB"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          compBoard: [\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          userBoard:[\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          compBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userShips: 2,\n          compShips: 2,\n          userTurn: \"user\",\n          userStatus:\"\"\n        }\n    }\n    handleBoard = (index) => {\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userTurn,compShips} = this.state\n          compBoard[index] = compBoardHide[index]\n          if(compBoard[index] === \"🛥💥\"){\n            this.setState({compShips:--compShips})\n          }\n            this.setState({\n                compBoard:compBoard,\n                compBoardHide: compBoardHide,\n                userTurn:\"computer\"\n        })\n    }\n\n    resetGame = () =>{\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userStatus} = this.state\n      compBoard = compBoard.map(value=> value =\"\")\n      userBoard = userBoard.map(value=> value=\"\")\n      compBoardHide = compBoardHide.map(value=> value=\"🤪\")\n      userBoardHide = userBoardHide.map(value=> value=\"🤪\")\n      userStatus = \"\"\n      this.setState({\n        compBoard:compBoard,\n        userBoard:userBoard,\n        compBoardHide:compBoardHide,\n        userBoardHide:userBoardHide,\n        userStatus:userStatus,\n      })\n\n    }\n//\n\n    randomize = () => {\n      // comp = computer , user = you\n      let {userBoard,compBoardHide,userBoardHide} = this.state\n      // finds random index that will assign battleships to compBoardHide\n      let randomCompBH1 = Math.ceil(Math.random()* compBoardHide.length)\n      let randomCompBH2 = Math.ceil(Math.random()* compBoardHide.length)\n        while(randomCompBH1 === randomCompBH2){\n          randomCompBH2 = Math.ceil(Math.random()* compBoardHide.length)\n        }\n        // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.ceil(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length)\n        while(randomUserBH1 === randomUserBH2){\n          randomUserBH2 = Math.ceil(Math.random()* userBoardHide.length)\n        }\n        userBoard[randomUserBH1] = \"⛵️\"\n        userBoard[randomUserBH2] = \"⛵️\"\n        userBoardHide[randomUserBH1] = \"⛵️\"\n        userBoardHide[randomUserBH2] = \"⛵️\"\n        compBoardHide[randomCompBH1] = \"🛥💥\"\n        compBoardHide[randomCompBH2] = \"🛥💥\"\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide:compBoardHide,\n          userBoardHide:userBoardHide,\n        })\n      \n    }\n    compChoose = () =>{\n      let {userBoard,userHiddenBoard,userShips,userStatus,userTurn} = this.state\n      let compChoice = Math.ceil(Math.random()*userHiddenBoard.length)\n      userBoard[compChoice] = userHiddenBoard[compChoice]\n      if(userBoard[compChoice] === \"⛵️\"){\n        this.setState({\n          userShips:--userShips\n        })\n      }\n    }\n\n  render() {\n    let {compBoard,userBoard,counter,userStatus,userTurn} = this.state\n    let compB = compBoard.map((value, index) => \n        <Square\n          handleBoard = {this.handleBoard}\n          randomize = {this.randomize}\n          index = { index } \n          value = { value }\n          counter = {counter}\n          userStatus = {userStatus}\n          userTurn = {userTurn}\n        /> )\n    let userB = userBoard.map((value, index)=> \n        <Square \n        />\n        )\n\n    return (\n     <div>\n       <p>Computer Board</p>\n       <br/>\n        <div className = \"board\">\n          {compB}\n        </div>\n        <p>User Board</p>\n        <br/>\n        <div className = \"board\">\n          {userB}\n        </div>\n        <button onClick={this.randomize}>Start Game</button>\n        <button onClick={this.compChoose}>Computers Turn</button>\n        <button onClick={this.resetGame}>Reset Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}