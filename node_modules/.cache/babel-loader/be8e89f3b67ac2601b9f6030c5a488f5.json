{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide\n      } = this.state;\n      compBoard[index] = compBoardHide[index];\n      this.setState({\n        compBoard: compBoard,\n        compBoardHide: compBoardHide\n      });\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"🤪\");\n      userBoardHide = userBoardHide.map(value => value = \"🤪\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      let randomCompBH1 = Math.ceil(Math.random() * compBoardHide.length);\n      let randomCompBH2 = Math.ceil(Math.random() * compBoardHide.length);\n\n      while (randomCompBH1 === randomCompBH2) {\n        randomCompBH2 = Math.ceil(Math.random() * compBoardHide.length);\n      } // finds random index that will assign battleships to userBoardHide\n\n\n      let randomUserBH1 = Math.ceil(Math.random() * userBoardHide.length);\n      let randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length);\n\n      while (randomUserBH1 === randomUserBH2) {\n        randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length);\n      }\n\n      userBoard[randomUserBH1] = \"⛵️\";\n      userBoard[randomUserBH2] = \"⛵️\";\n      userBoardHide[randomUserBH1] = \"⛵️\";\n      userBoardHide[randomUserBH2] = \"⛵️\";\n      compBoardHide[randomCompBH1] = \"🛥💥\";\n      compBoardHide[randomCompBH2] = \"🛥💥\";\n      this.setState({\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide\n      });\n    };\n\n    this.state = {\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userBoardHide: [\"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n      userShips: 2,\n      compShips: 2,\n      userStatus: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      counter,\n      userStatus\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      randomize: this.randomize,\n      index: index,\n      value: value,\n      counter: counter,\n      userStatus: userStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n    let userB = userBoard.map((value, index) => React.createElement(Square, {\n      index: index,\n      value: value,\n      handleBoard: this.handleBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Computer Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"User Board\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, userB), React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Reset Game\"));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","userBoard","compBoardHide","userBoardHide","state","setState","resetGame","userStatus","map","value","randomize","randomCompBH1","Math","ceil","random","length","randomCompBH2","randomUserBH1","randomUserBH2","userShips","compShips","render","counter","compB","userB"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          compBoard: [\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          userBoard:[\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          compBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userBoardHide:[\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\",\n                      \"🤪\", \"🤪\", \"🤪\", \"🤪\", \"🤪\"],\n          userShips: 2,\n          compShips: 2,\n          userStatus: \"\"\n        }\n    }\n    handleBoard = (index) => {\n      let {compBoard,userBoard,compBoardHide,userBoardHide} = this.state\n      compBoard[index] = compBoardHide[index]\n      this.setState({\n          compBoard:compBoard,\n          compBoardHide: compBoardHide\n      })\n\n    }\n\n    resetGame = () =>{\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userStatus} = this.state\n      compBoard = compBoard.map(value=> value =\"\")\n      userBoard = userBoard.map(value=> value=\"\")\n      compBoardHide = compBoardHide.map(value=> value=\"🤪\")\n      userBoardHide = userBoardHide.map(value=> value=\"🤪\")\n      userStatus = \"\"\n      this.setState({\n        compBoard:compBoard,\n        userBoard:userBoard,\n        compBoardHide:compBoardHide,\n        userBoardHide:userBoardHide,\n        userStatus:userStatus,\n      })\n\n    }\n//\n\n    randomize = () => {\n      // comp = computer , user = you\n      let {userBoard,compBoardHide,userBoardHide} = this.state\n      // finds random index that will assign battleships to compBoardHide\n      let randomCompBH1 = Math.ceil(Math.random()* compBoardHide.length)\n      let randomCompBH2 = Math.ceil(Math.random()* compBoardHide.length)\n        while(randomCompBH1 === randomCompBH2){\n          randomCompBH2 = Math.ceil(Math.random()* compBoardHide.length)\n        }\n        // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.ceil(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.ceil(Math.random() * userBoardHide.length)\n        while(randomUserBH1 === randomUserBH2){\n          randomUserBH2 = Math.ceil(Math.random()* userBoardHide.length)\n        }\n        userBoard[randomUserBH1] = \"⛵️\"\n        userBoard[randomUserBH2] = \"⛵️\"\n        userBoardHide[randomUserBH1] = \"⛵️\"\n        userBoardHide[randomUserBH2] = \"⛵️\"\n        compBoardHide[randomCompBH1] = \"🛥💥\"\n        compBoardHide[randomCompBH2] = \"🛥💥\"\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide:compBoardHide,\n          userBoardHide:userBoardHide,\n        })\n      \n    }\n\n  render() {\n    let {compBoard,userBoard,counter,userStatus} = this.state\n    let compB = compBoard.map((value, index) => \n        <Square\n          handleBoard = {this.handleBoard}\n          randomize = {this.randomize}\n          index = { index } \n          value = { value }\n          counter = {counter}\n          userStatus = {userStatus}\n        /> )\n    let userB = userBoard.map((value, index)=> \n        <Square \n          index = {index}\n          value = {value}\n          handleBoard = {this.handleBoard}\n        />\n        )\n\n    return (\n     <div>\n       <p>Computer Board</p>\n       <br/>\n        <div className = \"board\">\n          {compB}\n        </div>\n        <p>User Board</p>\n        <br/>\n        <div className = \"board\">\n          {userB}\n        </div>\n        <button onClick={this.randomize}>Start Game</button>\n        <button onClick={this.resetGame}>Reset Game</button>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}