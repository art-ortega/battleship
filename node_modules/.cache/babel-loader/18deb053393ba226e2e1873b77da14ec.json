{"ast":null,"code":"var _jsxFileName = \"/Users/artortega/Desktop/art-battleship/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleBoard = index => {\n      let {\n        compBoard,\n        compBoardHide,\n        compShips,\n        userArray\n      } = this.state;\n\n      if (!userArray.includes(index)) {\n        compBoard[index] = compBoardHide[index];\n        userArray.push(index);\n\n        if (compBoard[index] === \"üõ•üí•\") {\n          this.setState({\n            compShips: --compShips,\n            hitMessage: \"You got him!\"\n          });\n        } else {\n          this.setState({\n            hitMessage: \"You missed!\"\n          });\n        }\n\n        this.setState({\n          compBoard: compBoard,\n          compBoardHide: compBoardHide,\n          userTurn: \"computer\",\n          userArray: userArray\n        });\n\n        if (compShips < 1) {\n          this.setState({\n            userStatus: \"You sunk the enemies bootay! You win!\"\n          });\n        }\n      } else {\n        alert(\"You already took your shot there, try a different spot!\");\n      }\n\n      console.log(index);\n      console.log(\"userArr\", userArray);\n    };\n\n    this.resetGame = () => {\n      let {\n        compBoard,\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        userStatus,\n        gameStart\n      } = this.state;\n      compBoard = compBoard.map(value => value = \"\");\n      userBoard = userBoard.map(value => value = \"\");\n      compBoardHide = compBoardHide.map(value => value = \"ü§™\");\n      userBoardHide = userBoardHide.map(value => value = \"ü§™\");\n      userStatus = \"\";\n      this.setState({\n        compBoard: compBoard,\n        userBoard: userBoard,\n        compBoardHide: compBoardHide,\n        userBoardHide: userBoardHide,\n        userStatus: userStatus,\n        gameStart: 0,\n        hitMessage: \"\",\n        userShips: 2,\n        compShips: 2,\n        userTurn: \"user\"\n      });\n    };\n\n    this.randomize = () => {\n      // comp = computer , user = you\n      let {\n        userBoard,\n        compBoardHide,\n        userBoardHide,\n        gameStart,\n        shipArray\n      } = this.state; // finds random index that will assign battleships to compBoardHide\n\n      if (!gameStart) {\n        let randomCompBH1 = Math.floor(Math.random() * compBoardHide.length);\n        let randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n\n        while (randomCompBH1 === randomCompBH2) {\n          randomCompBH2 = Math.floor(Math.random() * compBoardHide.length);\n        } // finds random index that will assign battleships to userBoardHide\n\n\n        let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length);\n        let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n\n        while (randomUserBH1 === randomUserBH2) {\n          randomUserBH2 = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        userBoard[randomUserBH1] = \"‚õµÔ∏è\";\n        userBoard[randomUserBH2] = \"‚õµÔ∏è\";\n        userBoardHide[randomUserBH1] = \"‚õµÔ∏è\";\n        userBoardHide[randomUserBH2] = \"‚õµÔ∏è\";\n        compBoardHide[randomCompBH1] = \"üõ•üí•\";\n        compBoardHide[randomCompBH2] = \"üõ•üí•\";\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide: compBoardHide,\n          userBoardHide: userBoardHide,\n          gameStart: 1\n        });\n      }\n\n      console.log(userBoard);\n      console.log(userBoard.length);\n      console.log(compBoardHide);\n    };\n\n    this.compChoose = () => {\n      let {\n        userBoard,\n        userBoardHide,\n        userShips,\n        shipArray,\n        gameStart,\n        userStatus,\n        userTurn\n      } = this.state;\n\n      if (!gameStart) {\n        alert(\"Start the game!\");\n      } else if (gameStart && userStatus === \"\" && userTurn === \"computer\") {\n        let compChoice = Math.floor(Math.random() * userBoardHide.length); // while(userBoard[compChoice] = \"ü§™\"){\n        //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // }\n\n        while (shipArray.includes(compChoice)) {\n          compChoice = Math.floor(Math.random() * userBoardHide.length);\n        }\n\n        shipArray.push(compChoice);\n        userBoard[compChoice] = userBoardHide[compChoice];\n\n        if (userBoard[compChoice] === \"‚õµÔ∏è\") {\n          userBoard[compChoice] = \"‚õµÔ∏èüí•\";\n          this.setState({\n            userShips: --userShips,\n            hitMessage: \"You got hit!\"\n          });\n        } else {\n          this.setState({\n            hitMessage: \"The computer missed!\"\n          });\n        }\n\n        this.setState({\n          userBoard: userBoard,\n          userBoardHide: userBoardHide,\n          userTurn: \"user\",\n          shipArray: shipArray\n        });\n\n        if (userShips < 1) {\n          this.setState({\n            userStatus: \"Enemy sunk your bootay!\"\n          });\n        } // console.log(compChoice)\n        // console.log(shipArray)\n\n      }\n    };\n\n    this.state = {\n      compBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userBoard: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      compBoardHide: [\"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      userBoardHide: [\"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n      gameStart: 0,\n      userShips: 2,\n      compShips: 2,\n      shipArray: [],\n      userArray: [],\n      userTurn: \"user\",\n      userStatus: \"\",\n      hitMessage: \"\"\n    };\n  }\n\n  render() {\n    let {\n      compBoard,\n      userBoard,\n      userStatus,\n      userTurn,\n      userArray\n    } = this.state;\n    let compB = compBoard.map((value, index) => React.createElement(Square, {\n      handleBoard: this.handleBoard,\n      index: index,\n      value: value,\n      userStatus: userStatus,\n      userTurn: userTurn,\n      userArray: userArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }));\n    let userB = userBoard.map(value => React.createElement(Square, {\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"BATTLESHIP\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"full\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"compbutt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Enemy water \"), React.createElement(\"button\", {\n      onClick: this.compChoose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Computers Turn\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, compB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Enemy Ships: \", this.state.compShips)), React.createElement(\"div\", {\n      className: \"middlemessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.state.userStatus), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.hitMessage)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"fullone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"notsure\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Your Water\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, userB), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Your ships:  \", this.state.userShips)), React.createElement(\"div\", {\n      className: \"normbutt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Start Game\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Reset Game\")));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/artortega/Desktop/art-battleship/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleBoard","index","compBoard","compBoardHide","compShips","userArray","state","includes","push","setState","hitMessage","userTurn","userStatus","alert","console","log","resetGame","userBoard","userBoardHide","gameStart","map","value","userShips","randomize","shipArray","randomCompBH1","Math","floor","random","length","randomCompBH2","randomUserBH1","randomUserBH2","compChoose","compChoice","render","compB","userB"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqCnBC,WArCmB,GAqCJC,KAAD,IAAW;AACvB,UAAI;AAACC,QAAAA,SAAD;AAAWC,QAAAA,aAAX;AAAyBC,QAAAA,SAAzB;AAAmCC,QAAAA;AAAnC,UAAgD,KAAKC,KAAzD;;AACA,UAAG,CAAED,SAAS,CAACE,QAAV,CAAmBN,KAAnB,CAAL,EAAgC;AAC5BC,QAAAA,SAAS,CAACD,KAAD,CAAT,GAAmBE,aAAa,CAACF,KAAD,CAAhC;AACAI,QAAAA,SAAS,CAACG,IAAV,CAAeP,KAAf;;AACA,YAAGC,SAAS,CAACD,KAAD,CAAT,KAAqB,MAAxB,EAA+B;AAC7B,eAAKQ,QAAL,CAAc;AAACL,YAAAA,SAAS,EAAC,EAAEA,SAAb;AACdM,YAAAA,UAAU,EAAE;AADE,WAAd;AAED,SAHD,MAGO;AACL,eAAKD,QAAL,CAAc;AAACC,YAAAA,UAAU,EAAC;AAAZ,WAAd;AACD;;AACC,aAAKD,QAAL,CAAc;AACVP,UAAAA,SAAS,EAACA,SADA;AAEVC,UAAAA,aAAa,EAAEA,aAFL;AAGVQ,UAAAA,QAAQ,EAAC,UAHC;AAIVN,UAAAA,SAAS,EAACA;AAJA,SAAd;;AAMJ,YAAGD,SAAS,GAAG,CAAf,EAAiB;AACb,eAAKK,QAAL,CAAc;AACVG,YAAAA,UAAU,EAAC;AADD,WAAd;AAGH;AACF,OApBD,MAoBO;AACLC,QAAAA,KAAK,CAAC,yDAAD,CAAL;AACD;;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBV,SAAtB;AACH,KAhEkB;;AAAA,SAkEnBW,SAlEmB,GAkEP,MAAK;AACf,UAAI;AAACd,QAAAA,SAAD;AAAWe,QAAAA,SAAX;AAAqBd,QAAAA,aAArB;AAAmCe,QAAAA,aAAnC;AAAiDN,QAAAA,UAAjD;AAA4DO,QAAAA;AAA5D,UAAyE,KAAKb,KAAlF;AACAJ,MAAAA,SAAS,GAAGA,SAAS,CAACkB,GAAV,CAAcC,KAAK,IAAGA,KAAK,GAAE,EAA7B,CAAZ;AACAJ,MAAAA,SAAS,GAAGA,SAAS,CAACG,GAAV,CAAcC,KAAK,IAAGA,KAAK,GAAC,EAA5B,CAAZ;AACAlB,MAAAA,aAAa,GAAGA,aAAa,CAACiB,GAAd,CAAkBC,KAAK,IAAGA,KAAK,GAAC,IAAhC,CAAhB;AACAH,MAAAA,aAAa,GAAGA,aAAa,CAACE,GAAd,CAAkBC,KAAK,IAAGA,KAAK,GAAC,IAAhC,CAAhB;AACAT,MAAAA,UAAU,GAAG,EAAb;AACA,WAAKH,QAAL,CAAc;AACZP,QAAAA,SAAS,EAACA,SADE;AAEZe,QAAAA,SAAS,EAACA,SAFE;AAGZd,QAAAA,aAAa,EAACA,aAHF;AAIZe,QAAAA,aAAa,EAACA,aAJF;AAKZN,QAAAA,UAAU,EAACA,UALC;AAMZO,QAAAA,SAAS,EAAC,CANE;AAOZT,QAAAA,UAAU,EAAC,EAPC;AAQZY,QAAAA,SAAS,EAAE,CARC;AASZlB,QAAAA,SAAS,EAAE,CATC;AAUZO,QAAAA,QAAQ,EAAC;AAVG,OAAd;AAaD,KAtFkB;;AAAA,SAyFnBY,SAzFmB,GAyFP,MAAM;AAChB;AACA,UAAI;AAACN,QAAAA,SAAD;AAAWd,QAAAA,aAAX;AAAyBe,QAAAA,aAAzB;AAAuCC,QAAAA,SAAvC;AAAiDK,QAAAA;AAAjD,UAA8D,KAAKlB,KAAvE,CAFgB,CAGhB;;AACA,UAAG,CAACa,SAAJ,EAAe;AACf,YAAIM,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAezB,aAAa,CAAC0B,MAAxC,CAApB;AACA,YAAIC,aAAa,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAezB,aAAa,CAAC0B,MAAxC,CAApB;;AACE,eAAMJ,aAAa,KAAKK,aAAxB,EAAsC;AACpCA,UAAAA,aAAa,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAezB,aAAa,CAAC0B,MAAxC,CAAhB;AACD,SALY,CAMb;;;AACF,YAAIE,aAAa,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,aAAa,CAACW,MAAzC,CAApB;AACA,YAAIG,aAAa,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,aAAa,CAACW,MAAzC,CAApB;;AACE,eAAME,aAAa,KAAKC,aAAxB,EAAsC;AACpCA,UAAAA,aAAa,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAeV,aAAa,CAACW,MAAxC,CAAhB;AACD;;AACDZ,QAAAA,SAAS,CAACc,aAAD,CAAT,GAA2B,IAA3B;AACAd,QAAAA,SAAS,CAACe,aAAD,CAAT,GAA2B,IAA3B;AACAd,QAAAA,aAAa,CAACa,aAAD,CAAb,GAA+B,IAA/B;AACAb,QAAAA,aAAa,CAACc,aAAD,CAAb,GAA+B,IAA/B;AACA7B,QAAAA,aAAa,CAACsB,aAAD,CAAb,GAA+B,MAA/B;AACAtB,QAAAA,aAAa,CAAC2B,aAAD,CAAb,GAA+B,MAA/B;AACA,aAAKrB,QAAL,CAAc;AACZQ,UAAAA,SAAS,EAAEA,SADC;AAEZd,UAAAA,aAAa,EAACA,aAFF;AAGZe,UAAAA,aAAa,EAACA,aAHF;AAIZC,UAAAA,SAAS,EAAC;AAJE,SAAd;AAMD;;AACCL,MAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,SAAS,CAACY,MAAtB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AAEH,KA1HkB;;AAAA,SA2HnB8B,UA3HmB,GA2HN,MAAK;AAChB,UAAI;AAAChB,QAAAA,SAAD;AAAWC,QAAAA,aAAX;AAAyBI,QAAAA,SAAzB;AAAmCE,QAAAA,SAAnC;AAA6CL,QAAAA,SAA7C;AAAuDP,QAAAA,UAAvD;AAAkED,QAAAA;AAAlE,UAA8E,KAAKL,KAAvF;;AACA,UAAG,CAACa,SAAJ,EAAc;AACZN,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACD,OAFD,MAEO,IAAGM,SAAS,IAAIP,UAAU,KAAK,EAA5B,IAAkCD,QAAQ,KAAI,UAAjD,EAA4D;AACjE,YAAIuB,UAAU,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAeV,aAAa,CAACW,MAAxC,CAAjB,CADiE,CAEjE;AACA;AACA;;AACA,eAAML,SAAS,CAACjB,QAAV,CAAmB2B,UAAnB,CAAN,EAAqC;AACjCA,UAAAA,UAAU,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,aAAa,CAACW,MAAzC,CAAb;AACH;;AACDL,QAAAA,SAAS,CAAChB,IAAV,CAAe0B,UAAf;AACAjB,QAAAA,SAAS,CAACiB,UAAD,CAAT,GAAwBhB,aAAa,CAACgB,UAAD,CAArC;;AACA,YAAGjB,SAAS,CAACiB,UAAD,CAAT,KAA0B,IAA7B,EAAkC;AAC9BjB,UAAAA,SAAS,CAACiB,UAAD,CAAT,GAAwB,MAAxB;AACA,eAAKzB,QAAL,CAAc;AACda,YAAAA,SAAS,EAAC,EAAEA,SADE;AAEdZ,YAAAA,UAAU,EAAC;AAFG,WAAd;AAIH,SAND,MAMO;AACH,eAAKD,QAAL,CAAc;AACdC,YAAAA,UAAU,EAAC;AADG,WAAd;AAGH;;AACD,aAAKD,QAAL,CAAc;AACVQ,UAAAA,SAAS,EAACA,SADA;AAEVC,UAAAA,aAAa,EAACA,aAFJ;AAGVP,UAAAA,QAAQ,EAAC,MAHC;AAIVa,UAAAA,SAAS,EAACA;AAJA,SAAd;;AAKA,YAAGF,SAAS,GAAG,CAAf,EAAiB;AACb,eAAKb,QAAL,CAAc;AACVG,YAAAA,UAAU,EAAC;AADD,WAAd;AAGH,SA9BgE,CA+BjE;AACA;;AACD;AACF,KAjKkB;;AAEb,SAAKN,KAAL,GAAa;AACbJ,MAAAA,SAAS,EAAE,CACC,EADD,EACK,EADL,EACS,EADT,EACa,EADb,EACiB,EADjB,EAEC,EAFD,EAEK,EAFL,EAES,EAFT,EAEa,EAFb,EAEiB,EAFjB,EAGC,EAHD,EAGK,EAHL,EAGS,EAHT,EAGa,EAHb,EAGiB,EAHjB,EAIC,EAJD,EAIK,EAJL,EAIS,EAJT,EAIa,EAJb,EAIiB,EAJjB,EAKC,EALD,EAKK,EALL,EAKS,EALT,EAKa,EALb,EAKiB,EALjB,CADE;AAObe,MAAAA,SAAS,EAAC,CACE,EADF,EACM,EADN,EACU,EADV,EACc,EADd,EACkB,EADlB,EAEE,EAFF,EAEM,EAFN,EAEU,EAFV,EAEc,EAFd,EAEkB,EAFlB,EAGE,EAHF,EAGM,EAHN,EAGU,EAHV,EAGc,EAHd,EAGkB,EAHlB,EAIE,EAJF,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,EAJlB,EAKE,EALF,EAKM,EALN,EAKU,EALV,EAKc,EALd,EAKkB,EALlB,CAPG;AAabd,MAAAA,aAAa,EAAC,CACF,IADE,EACI,IADJ,EACU,IADV,EACgB,IADhB,EACsB,IADtB,EAEF,IAFE,EAEI,IAFJ,EAEU,IAFV,EAEgB,IAFhB,EAEsB,IAFtB,EAGF,IAHE,EAGI,IAHJ,EAGU,IAHV,EAGgB,IAHhB,EAGsB,IAHtB,EAIF,IAJE,EAII,IAJJ,EAIU,IAJV,EAIgB,IAJhB,EAIsB,IAJtB,EAKF,IALE,EAKI,IALJ,EAKU,IALV,EAKgB,IALhB,EAKsB,IALtB,CAbD;AAmBbe,MAAAA,aAAa,EAAC,CACF,IADE,EACI,IADJ,EACU,IADV,EACgB,IADhB,EACsB,IADtB,EAEF,IAFE,EAEI,IAFJ,EAEU,IAFV,EAEgB,IAFhB,EAEsB,IAFtB,EAGF,IAHE,EAGI,IAHJ,EAGU,IAHV,EAGgB,IAHhB,EAGsB,IAHtB,EAIF,IAJE,EAII,IAJJ,EAIU,IAJV,EAIgB,IAJhB,EAIsB,IAJtB,EAKF,IALE,EAKI,IALJ,EAKU,IALV,EAKgB,IALhB,EAKsB,IALtB,CAnBD;AAyBbC,MAAAA,SAAS,EAAE,CAzBE;AA0BbG,MAAAA,SAAS,EAAE,CA1BE;AA2BblB,MAAAA,SAAS,EAAE,CA3BE;AA4BboB,MAAAA,SAAS,EAAC,EA5BG;AA6BbnB,MAAAA,SAAS,EAAC,EA7BG;AA8BbM,MAAAA,QAAQ,EAAE,MA9BG;AA+BbC,MAAAA,UAAU,EAAC,EA/BE;AAgCbF,MAAAA,UAAU,EAAC;AAhCE,KAAb;AAkCL;;AA+HHyB,EAAAA,MAAM,GAAG;AACP,QAAI;AAACjC,MAAAA,SAAD;AAAWe,MAAAA,SAAX;AAAqBL,MAAAA,UAArB;AAAgCD,MAAAA,QAAhC;AAAyCN,MAAAA;AAAzC,QAAsD,KAAKC,KAA/D;AACA,QAAI8B,KAAK,GAAGlC,SAAS,CAACkB,GAAV,CAAc,CAACC,KAAD,EAAQpB,KAAR,KACtB,oBAAC,MAAD;AACE,MAAA,WAAW,EAAI,KAAKD,WADtB;AAEE,MAAA,KAAK,EAAKC,KAFZ;AAGE,MAAA,KAAK,EAAKoB,KAHZ;AAIE,MAAA,UAAU,EAAIT,UAJhB;AAKE,MAAA,QAAQ,EAAID,QALd;AAME,MAAA,SAAS,EAAIN,SANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,CAAZ;AASA,QAAIgC,KAAK,GAAGpB,SAAS,CAACG,GAAV,CAAeC,KAAD,IACtB,oBAAC,MAAD;AACA,MAAA,KAAK,EAAEA,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ,CAAZ;AAMA,WACC;AAAK,MAAA,SAAS,EAAG,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAK,MAAA,SAAS,EAAG,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADH,EAEG;AAAQ,MAAA,OAAO,EAAE,KAAKY,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFH,CADL,EAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,EAMG;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,KADH,CANH,EASG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiB,KAAK9B,KAAL,CAAWF,SAA5B,CATH,CAHF,EAcG;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWM,UAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKN,KAAL,CAAWI,UAAf,CAHF,CAdH,EAmBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBH,EAoBG;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG2B,KADH,CALF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAiB,KAAK/B,KAAL,CAAWgB,SAA5B,CARF,CApBH,EA8BG;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKP,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CA9BH,CADD;AAqCD;;AA1N2B;;AA6N9B,eAAenB,KAAf","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n          this.state = { \n          compBoard: [\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          userBoard:[\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\",\n                      \"\", \"\", \"\", \"\", \"\"],\n          compBoardHide:[\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n          userBoardHide:[\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\",\n                      \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\", \"ü§™\"],\n          gameStart: 0,\n          userShips: 2,\n          compShips: 2,\n          shipArray:[],\n          userArray:[],\n          userTurn: \"user\",\n          userStatus:\"\",\n          hitMessage:\"\"\n        }\n    }\n    handleBoard = (index) => {\n      let {compBoard,compBoardHide,compShips,userArray} = this.state\n      if(!(userArray.includes(index))){\n          compBoard[index] = compBoardHide[index]\n          userArray.push(index)\n          if(compBoard[index] === \"üõ•üí•\"){\n            this.setState({compShips:--compShips,\n            hitMessage: \"You got him!\"})\n          } else {\n            this.setState({hitMessage:\"You missed!\"})\n          }\n            this.setState({\n                compBoard:compBoard,\n                compBoardHide: compBoardHide,\n                userTurn:\"computer\",\n                userArray:userArray\n        })\n        if(compShips < 1){\n            this.setState({\n                userStatus:\"You sunk the enemies bootay! You win!\"\n            })\n        }\n      } else {\n        alert(\"You already took your shot there, try a different spot!\")\n      }\n        console.log(index)\n        console.log(\"userArr\",userArray)\n    }\n\n    resetGame = () =>{\n      let {compBoard,userBoard,compBoardHide,userBoardHide,userStatus,gameStart} = this.state\n      compBoard = compBoard.map(value=> value =\"\")\n      userBoard = userBoard.map(value=> value=\"\")\n      compBoardHide = compBoardHide.map(value=> value=\"ü§™\")\n      userBoardHide = userBoardHide.map(value=> value=\"ü§™\")\n      userStatus = \"\"\n      this.setState({\n        compBoard:compBoard,\n        userBoard:userBoard,\n        compBoardHide:compBoardHide,\n        userBoardHide:userBoardHide,\n        userStatus:userStatus,\n        gameStart:0,\n        hitMessage:\"\",\n        userShips: 2,\n        compShips: 2,\n        userTurn:\"user\"\n      })\n\n    }\n//\n\n    randomize = () => {\n      // comp = computer , user = you\n      let {userBoard,compBoardHide,userBoardHide,gameStart,shipArray} = this.state\n      // finds random index that will assign battleships to compBoardHide\n      if(!gameStart) {\n      let randomCompBH1 = Math.floor(Math.random()* compBoardHide.length)\n      let randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        while(randomCompBH1 === randomCompBH2){\n          randomCompBH2 = Math.floor(Math.random()* compBoardHide.length)\n        }\n        // finds random index that will assign battleships to userBoardHide\n      let randomUserBH1 = Math.floor(Math.random() * userBoardHide.length)\n      let randomUserBH2 = Math.floor(Math.random() * userBoardHide.length)\n        while(randomUserBH1 === randomUserBH2){\n          randomUserBH2 = Math.floor(Math.random()* userBoardHide.length)\n        }\n        userBoard[randomUserBH1] = \"‚õµÔ∏è\"\n        userBoard[randomUserBH2] = \"‚õµÔ∏è\"\n        userBoardHide[randomUserBH1] = \"‚õµÔ∏è\"\n        userBoardHide[randomUserBH2] = \"‚õµÔ∏è\"\n        compBoardHide[randomCompBH1] = \"üõ•üí•\"\n        compBoardHide[randomCompBH2] = \"üõ•üí•\"\n        this.setState({\n          userBoard: userBoard,\n          compBoardHide:compBoardHide,\n          userBoardHide:userBoardHide,\n          gameStart:1\n        })\n      }\n        console.log(userBoard)\n        console.log(userBoard.length)\n        console.log(compBoardHide)\n      \n    }\n    compChoose = () =>{\n      let {userBoard,userBoardHide,userShips,shipArray,gameStart,userStatus,userTurn} = this.state\n      if(!gameStart){\n        alert(\"Start the game!\")\n      } else if(gameStart && userStatus === \"\" && userTurn ===\"computer\"){\n        let compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // while(userBoard[compChoice] = \"ü§™\"){\n        //     compChoice = Math.floor(Math.random()* userBoardHide.length)\n        // }\n        while(shipArray.includes(compChoice)){\n            compChoice = Math.floor(Math.random() * userBoardHide.length)\n        }\n        shipArray.push(compChoice)\n        userBoard[compChoice] = userBoardHide[compChoice]\n        if(userBoard[compChoice] === \"‚õµÔ∏è\"){\n            userBoard[compChoice] = \"‚õµÔ∏èüí•\"\n            this.setState({\n            userShips:--userShips,\n            hitMessage:\"You got hit!\"\n            })\n        } else {\n            this.setState({\n            hitMessage:\"The computer missed!\"\n            })\n        }\n        this.setState({\n            userBoard:userBoard,\n            userBoardHide:userBoardHide,\n            userTurn:\"user\",\n            shipArray:shipArray})\n        if(userShips < 1){\n            this.setState({\n                userStatus:\"Enemy sunk your bootay!\"\n            })\n        }\n        // console.log(compChoice)\n        // console.log(shipArray)\n      }\n    }\n\n  render() {\n    let {compBoard,userBoard,userStatus,userTurn,userArray} = this.state\n    let compB = compBoard.map((value, index) => \n        <Square\n          handleBoard = {this.handleBoard}\n          index = { index } \n          value = { value }\n          userStatus = {userStatus}\n          userTurn = {userTurn}\n          userArray = {userArray}\n        /> )\n    let userB = userBoard.map((value)=> \n        <Square \n        value={value}\n        />\n        )\n\n    return (\n     <div className = \"all\">\n       <h1>BATTLESHIP</h1>\n       <br/>\n       <div className = \"full\">\n            <div className = \"compbutt\">\n               <p>Enemy water </p>\n               <button onClick={this.compChoose}>Computers Turn</button>\n            </div>\n        <br/>\n          <div className = \"board\">\n            {compB}\n          </div>\n          <p>Enemy Ships: {this.state.compShips}</p>\n        </div>\n        <div className = \"middlemessage\">\n          <h1>{this.state.userStatus}</h1>\n          <br/>\n          <p>{this.state.hitMessage}</p>\n        </div>\n        <br/>\n        <div className = \"fullone\">\n          <div className = \"notsure\">\n          <p>Your Water</p>\n          </div>\n          <br/>\n          <div className = \"board\">\n            {userB}\n          </div>\n          <p>Your ships:  {this.state.userShips}</p>\n        </div>\n        <div className =\"normbutt\">\n          <button onClick={this.randomize} >Start Game</button>\n          <button onClick={this.resetGame}>Reset Game</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}